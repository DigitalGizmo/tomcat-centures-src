package museum.history.deerfield.centuries.database.om;

import java.util.List;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.TorqueException;

/** 
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Sat Sep 13 06:48:37 EDT 2003]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 */
public class Visitor extends BaseVisitor implements Persistent {

  private static String DEFAULT_ROLE_LABEL = "uzer";
  private static Role   DEFAULT_ROLE       = null;

  /**
   * Returns this visitor's role label.
   */
  public String getRoleLabel() {

    int    roleID = getRoleID();
  	String label  = null;
  	
    try {
      Criteria criteria = new Criteria();
      criteria.add( RolePeer.ROLEID, roleID );
      List roles = RolePeer.doSelect( criteria );
      Role role  = (Role) roles.get( 0 );
      label      = role.getLabel();
    
    } catch (TorqueException e) {
    	System.out.println( "Visitor getRole:  unable to get role label for roleID [" + roleID + "]" );
    }
    
    return (label);
  }
  
  /**
   * Upgrades the visitor to author role.  Does nothing if visitor is already in author role or higher.
   */
  public void setAuthorRole() {
  	
  	try {
      Criteria criteria = new Criteria();
      criteria.add( RolePeer.LABEL, "author" );
      List roles      = RolePeer.doSelect( criteria );
      Role authorRole = (Role) roles.get( 0 );

      if (authorRole.getRoleID() > getRoleID()) {
      	setRole( authorRole );
        save();
      }      
    } catch (TorqueException e) {
    	System.out.println( "Visitor setAuthorRole:  TorqueException thrown by RolePeer.doSelect() or setRole()" );
    } catch (Exception e) {
    	System.out.println( "Visitor setAuthorRole:  TorqueException thrown by save()" );
    }
  }

  /**
   * Returns the default role in which all authenticated new visitors start.
   */
  public static Role getDefaultRole() {

    if (DEFAULT_ROLE == null) {
    
      try {
        Criteria criteria = new Criteria();
        criteria.add( RolePeer.LABEL, DEFAULT_ROLE_LABEL );
        List roles   = RolePeer.doSelect( criteria );
        DEFAULT_ROLE = (Role) roles.get( 0 );
      
      } catch (TorqueException e) {
      	System.out.println( "Visitor getDefaultRole:  unable to get role for label [" + DEFAULT_ROLE_LABEL + "]" );
      }    
    }
    return (DEFAULT_ROLE);
  }
}
