package museum.history.deerfield.centuries.database.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Sep 09 17:11:01 EDT 2010]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to CollectionItem
 */
public abstract class BaseCollectionItem extends BaseObject
{
    /** The Peer class */
    private static final CollectionItemPeer peer =
        new CollectionItemPeer();

        
    /** The value for the visitorID field */
    private int visitorID;
      
    /** The value for the itemID field */
    private int itemID;
  
    
    /**
     * Get the VisitorID
     *
     * @return int
     */
    public int getVisitorID()
    {
        return visitorID;
    }

                              
    /**
     * Set the value of VisitorID
     *
     * @param v new value
     */
    public void setVisitorID(int v) throws TorqueException
    {
    
                  if (this.visitorID != v)
              {
            this.visitorID = v;
            setModified(true);
        }
    
                          
                if (aVisitor != null && !(aVisitor.getVisitorID() == v))
                {
            aVisitor = null;
        }
      
              }
  
    /**
     * Get the ItemID
     *
     * @return int
     */
    public int getItemID()
    {
        return itemID;
    }

                        
    /**
     * Set the value of ItemID
     *
     * @param v new value
     */
    public void setItemID(int v) 
    {
    
                  if (this.itemID != v)
              {
            this.itemID = v;
            setModified(true);
        }
    
          
              }
  
      
    
                  
    
        private Visitor aVisitor;

    /**
     * Declares an association between this object and a Visitor object
     *
     * @param v Visitor
     * @throws TorqueException
     */
    public void setVisitor(Visitor v) throws TorqueException
    {
            if (v == null)
        {
                    setVisitorID(0);
                  }
        else
        {
            setVisitorID(v.getVisitorID());
        }
                aVisitor = v;
    }

                                            
    /**
     * Get the associated Visitor object
     *
     * @return the associated Visitor object
     * @throws TorqueException
     */
    public Visitor getVisitor() throws TorqueException
    {
        if (aVisitor == null && (this.visitorID > 0))
        {
                          aVisitor = VisitorPeer.retrieveByPK(SimpleKey.keyFor(this.visitorID));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Visitor obj = VisitorPeer.retrieveByPK(this.visitorID);
               obj.addCollectionItems(this);
            */
        }
        return aVisitor;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
           */
    public void setVisitorKey(ObjectKey key) throws TorqueException
    {
      
                        setVisitorID(((NumberKey) key).intValue());
                  }
       
                
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("VisitorID");
              fieldNames.add("ItemID");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("VisitorID"))
        {
                return new Integer(getVisitorID());
            }
          if (name.equals("ItemID"))
        {
                return new Integer(getItemID());
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(CollectionItemPeer.VISITORID))
        {
                return new Integer(getVisitorID());
            }
          if (name.equals(CollectionItemPeer.ITEMID))
        {
                return new Integer(getItemID());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getVisitorID());
            }
              if (pos == 1)
        {
                return new Integer(getItemID());
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(CollectionItemPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    CollectionItemPeer.doInsert((CollectionItem) this, con);
                    setNew(false);
                }
                else
                {
                    CollectionItemPeer.doUpdate((CollectionItem) this, con);
                }
            }

                      alreadyInSave = false;
        }
      }


    
  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return null;
      }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public CollectionItem copy() throws TorqueException
    {
        return copyInto(new CollectionItem());
    }
  
    protected CollectionItem copyInto(CollectionItem copyObj) throws TorqueException
    {
          copyObj.setVisitorID(visitorID);
          copyObj.setItemID(itemID);
  
              
        
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public CollectionItemPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("CollectionItem:\n");
        str.append("VisitorID = ")
           .append(getVisitorID())
           .append("\n");
        str.append("ItemID = ")
           .append(getItemID())
           .append("\n");
        return(str.toString());
    }
}
