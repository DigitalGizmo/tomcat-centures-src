package museum.history.deerfield.centuries.database.om;

import java.util.HashMap;
import java.util.Collection;
import java.util.List;
import java.util.Iterator;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.torque.util.Criteria;
import org.apache.torque.TorqueException;
import com.workingdogs.village.DataSet;

/** 
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Sep 10 14:50:05 EDT 2003]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class VisitorPeer extends BaseVisitorPeer {
  
  private Log log = LogFactory.getLog( this.getClass() );

  /**
   * <p>Create and return a new {@link Visitor} defined in this visitor database.</p>
   *
   * @param visitorName unique name chosen by the new visitor
   * @param password password for the new visitor
   */
  public static Visitor createVisitor( String visitorName, String password ) {

    Visitor visitor = createVisitor( visitorName, password, null, null );
    return (visitor);
  }


  /**
   * <p>Creates and returns a new {@link Visitor} defined in this visitor database.</p>
   *
   * @param visitorName unique name chosen by the new visitor
   * @param password password for the new visitor
   * @param lastName last name of the new visitor
   * @param firstName first name of the new visitor
   */
  public static Visitor createVisitor( String visitorName, String password, String lastName, String firstName ) {

    Visitor visitor = new Visitor();
    visitor.setVisitorName( visitorName );
    visitor.setPassword(    password    );
    visitor.setLastName(    lastName    );
    visitor.setFirstName(   firstName   );
    
    try {
      visitor.setRole( visitor.getDefaultRole() );
      visitor.save();      
    } catch (TorqueException e) {
      System.out.println( "VisitorPeer createVisitor:  TorqueException thrown by visitor.setRole()" );
    } catch (Exception e) {
      System.out.println( "VisitorPeer createVisitor:  Exception thrown by visitor.save()" );
    }
    
    return (visitor);
  }

  
  /**
   * Removes the specified {@link Visitor} from this database.
   *
   * @param visitor Visitor to be removed
   */
  public void removeVisitor( Visitor visitor ) {

    if (log.isTraceEnabled())
      log.trace( "Removing visitor '" + visitor.getFirstName() + " " + visitor.getLastName() + "'" );

    int visitorID = visitor.getVisitorID();      
    Criteria criteria = new Criteria();
    criteria.add( VISITORID, visitorID );
      
    try {
      doDelete( criteria );
    } catch (TorqueException e) {
      log.error( "VisitorPeer removeVisitor", e );      	
    }
  }


  /**
   * <p>Returns the existing {@link Visitor} with the specified visitorName, if any; 
   * otherwise return <code>null</code>.</p>
   *
   * @param visitorID ID of the visitor to retrieve
   */
  public static Visitor findVisitor( String visitorName ) throws TorqueException {

    Criteria criteria = new Criteria();
    criteria.add( VISITORNAME, visitorName );
    
    Visitor visitor = null;
    List visitors   = doSelect( criteria );

    if (visitors.isEmpty()) return null;
      
    if (visitors.size() == 1) {
      visitor = (Visitor) visitors.get( 0 );
    } else {
      handleMultipleRecords( (DataSet) visitors );
    }
    
    return (visitor);
  }
}
