package museum.history.deerfield.centuries.database.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
    
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Sep 09 17:11:01 EDT 2010]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Activity
 */
public abstract class BaseActivity extends BaseObject
{
    /** The Peer class */
    private static final ActivityPeer peer =
        new ActivityPeer();

        
    /** The value for the activityID field */
    private int activityID;
                                          
    /** The value for the statusID field */
    private int statusID = 0;
      
    /** The value for the visitorID field */
    private int visitorID;
      
    /** The value for the title field */
    private String title;
      
    /** The value for the shortDescription field */
    private String shortDescription;
      
    /** The value for the longDescription field */
    private String longDescription;
      
    /** The value for the submittedOn field */
    private Date submittedOn;
  
    
    /**
     * Get the ActivityID
     *
     * @return int
     */
    public int getActivityID()
    {
        return activityID;
    }

                                              
    /**
     * Set the value of ActivityID
     *
     * @param v new value
     */
    public void setActivityID(int v) throws TorqueException
    {
    
                  if (this.activityID != v)
              {
            this.activityID = v;
            setModified(true);
        }
    
          
                                  
        // update associated ActivityItem
        if (collActivityItems != null)
        {
            for (int i = 0; i < collActivityItems.size(); i++)
            {
                ((ActivityItem) collActivityItems.get(i))
                    .setActivityID(v);
            }
        }
                                          
        // update associated HistoricalEra
        if (collHistoricalEras != null)
        {
            for (int i = 0; i < collHistoricalEras.size(); i++)
            {
                ((HistoricalEra) collHistoricalEras.get(i))
                    .setActivityID(v);
            }
        }
                                          
        // update associated GradeLevel
        if (collGradeLevels != null)
        {
            for (int i = 0; i < collGradeLevels.size(); i++)
            {
                ((GradeLevel) collGradeLevels.get(i))
                    .setActivityID(v);
            }
        }
                                          
        // update associated ContentArea
        if (collContentAreas != null)
        {
            for (int i = 0; i < collContentAreas.size(); i++)
            {
                ((ContentArea) collContentAreas.get(i))
                    .setActivityID(v);
            }
        }
                                          
        // update associated TeachingPlanStep
        if (collTeachingPlanSteps != null)
        {
            for (int i = 0; i < collTeachingPlanSteps.size(); i++)
            {
                ((TeachingPlanStep) collTeachingPlanSteps.get(i))
                    .setActivityID(v);
            }
        }
                                          
        // update associated WebLink
        if (collWebLinks != null)
        {
            for (int i = 0; i < collWebLinks.size(); i++)
            {
                ((WebLink) collWebLinks.get(i))
                    .setActivityID(v);
            }
        }
                      }
  
    /**
     * Get the StatusID
     *
     * @return int
     */
    public int getStatusID()
    {
        return statusID;
    }

                              
    /**
     * Set the value of StatusID
     *
     * @param v new value
     */
    public void setStatusID(int v) throws TorqueException
    {
    
                  if (this.statusID != v)
              {
            this.statusID = v;
            setModified(true);
        }
    
                          
                if (aStatus != null && !(aStatus.getStatusID() == v))
                {
            aStatus = null;
        }
      
              }
  
    /**
     * Get the VisitorID
     *
     * @return int
     */
    public int getVisitorID()
    {
        return visitorID;
    }

                              
    /**
     * Set the value of VisitorID
     *
     * @param v new value
     */
    public void setVisitorID(int v) throws TorqueException
    {
    
                  if (this.visitorID != v)
              {
            this.visitorID = v;
            setModified(true);
        }
    
                          
                if (aVisitor != null && !(aVisitor.getVisitorID() == v))
                {
            aVisitor = null;
        }
      
              }
  
    /**
     * Get the Title
     *
     * @return String
     */
    public String getTitle()
    {
        return title;
    }

                        
    /**
     * Set the value of Title
     *
     * @param v new value
     */
    public void setTitle(String v) 
    {
    
                  if (!ObjectUtils.equals(this.title, v))
              {
            this.title = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ShortDescription
     *
     * @return String
     */
    public String getShortDescription()
    {
        return shortDescription;
    }

                        
    /**
     * Set the value of ShortDescription
     *
     * @param v new value
     */
    public void setShortDescription(String v) 
    {
    
                  if (!ObjectUtils.equals(this.shortDescription, v))
              {
            this.shortDescription = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the LongDescription
     *
     * @return String
     */
    public String getLongDescription()
    {
        return longDescription;
    }

                        
    /**
     * Set the value of LongDescription
     *
     * @param v new value
     */
    public void setLongDescription(String v) 
    {
    
                  if (!ObjectUtils.equals(this.longDescription, v))
              {
            this.longDescription = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the SubmittedOn
     *
     * @return Date
     */
    public Date getSubmittedOn()
    {
        return submittedOn;
    }

                        
    /**
     * Set the value of SubmittedOn
     *
     * @param v new value
     */
    public void setSubmittedOn(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.submittedOn, v))
              {
            this.submittedOn = v;
            setModified(true);
        }
    
          
              }
  
      
    
                  
    
        private Status aStatus;

    /**
     * Declares an association between this object and a Status object
     *
     * @param v Status
     * @throws TorqueException
     */
    public void setStatus(Status v) throws TorqueException
    {
            if (v == null)
        {
                    setStatusID(0);
                  }
        else
        {
            setStatusID(v.getStatusID());
        }
                aStatus = v;
    }

                                            
    /**
     * Get the associated Status object
     *
     * @return the associated Status object
     * @throws TorqueException
     */
    public Status getStatus() throws TorqueException
    {
        if (aStatus == null && (this.statusID > 0))
        {
                          aStatus = StatusPeer.retrieveByPK(SimpleKey.keyFor(this.statusID));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Status obj = StatusPeer.retrieveByPK(this.statusID);
               obj.addActivitys(this);
            */
        }
        return aStatus;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
           */
    public void setStatusKey(ObjectKey key) throws TorqueException
    {
      
                        setStatusID(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Visitor aVisitor;

    /**
     * Declares an association between this object and a Visitor object
     *
     * @param v Visitor
     * @throws TorqueException
     */
    public void setVisitor(Visitor v) throws TorqueException
    {
            if (v == null)
        {
                    setVisitorID(0);
                  }
        else
        {
            setVisitorID(v.getVisitorID());
        }
                aVisitor = v;
    }

                                            
    /**
     * Get the associated Visitor object
     *
     * @return the associated Visitor object
     * @throws TorqueException
     */
    public Visitor getVisitor() throws TorqueException
    {
        if (aVisitor == null && (this.visitorID > 0))
        {
                          aVisitor = VisitorPeer.retrieveByPK(SimpleKey.keyFor(this.visitorID));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Visitor obj = VisitorPeer.retrieveByPK(this.visitorID);
               obj.addActivitys(this);
            */
        }
        return aVisitor;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
           */
    public void setVisitorKey(ObjectKey key) throws TorqueException
    {
      
                        setVisitorID(((NumberKey) key).intValue());
                  }
       
                                
            
    /**
     * Collection to store aggregation of collActivityItems
     */
    protected List collActivityItems;

    /**
     * Temporary storage of collActivityItems to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initActivityItems()
    {
        if (collActivityItems == null)
        {
            collActivityItems = new ArrayList();
        }
    }

    /**
     * Method called to associate a ActivityItem object to this object
     * through the ActivityItem foreign key attribute
     *
     * @param l ActivityItem
     * @throws TorqueException
     */
    public void addActivityItem(ActivityItem l) throws TorqueException
    {
        getActivityItems().add(l);
        l.setActivity((Activity) this);
    }

    /**
     * The criteria used to select the current contents of collActivityItems
     */
    private Criteria lastActivityItemsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getActivityItems(new Criteria())
     *
     * @throws TorqueException
     */
    public List getActivityItems() throws TorqueException
    {
        if (collActivityItems == null)
        {
            collActivityItems = getActivityItems(new Criteria(10));
        }
        return collActivityItems;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity has previously
     * been saved, it will retrieve related ActivityItems from storage.
     * If this Activity is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getActivityItems(Criteria criteria) throws TorqueException
    {
        if (collActivityItems == null)
        {
            if (isNew())
            {
               collActivityItems = new ArrayList();
            }
            else
            {
                      criteria.add(ActivityItemPeer.ACTIVITYID, getActivityID() );
                      collActivityItems = ActivityItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(ActivityItemPeer.ACTIVITYID, getActivityID());
                      if (!lastActivityItemsCriteria.equals(criteria))
                {
                    collActivityItems = ActivityItemPeer.doSelect(criteria);
                }
            }
        }
        lastActivityItemsCriteria = criteria;

        return collActivityItems;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getActivityItems(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getActivityItems(Connection con) throws TorqueException
    {
        if (collActivityItems == null)
        {
            collActivityItems = getActivityItems(new Criteria(10), con);
        }
        return collActivityItems;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity has previously
     * been saved, it will retrieve related ActivityItems from storage.
     * If this Activity is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getActivityItems(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collActivityItems == null)
        {
            if (isNew())
            {
               collActivityItems = new ArrayList();
            }
            else
            {
                       criteria.add(ActivityItemPeer.ACTIVITYID, getActivityID());
                       collActivityItems = ActivityItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(ActivityItemPeer.ACTIVITYID, getActivityID());
                       if (!lastActivityItemsCriteria.equals(criteria))
                 {
                     collActivityItems = ActivityItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastActivityItemsCriteria = criteria;

         return collActivityItems;
     }

                  
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity is new, it will return
     * an empty collection; or if this Activity has previously
     * been saved, it will retrieve related ActivityItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Activity.
     */
    protected List getActivityItemsJoinActivity(Criteria criteria)
        throws TorqueException
    {
        if (collActivityItems == null)
        {
            if (isNew())
            {
               collActivityItems = new ArrayList();
            }
            else
            {
                            criteria.add(ActivityItemPeer.ACTIVITYID, getActivityID());
                            collActivityItems = ActivityItemPeer.doSelectJoinActivity(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ActivityItemPeer.ACTIVITYID, getActivityID());
                        if (!lastActivityItemsCriteria.equals(criteria))
            {
                collActivityItems = ActivityItemPeer.doSelectJoinActivity(criteria);
            }
        }
        lastActivityItemsCriteria = criteria;

        return collActivityItems;
    }
                            


                          
            
    /**
     * Collection to store aggregation of collHistoricalEras
     */
    protected List collHistoricalEras;

    /**
     * Temporary storage of collHistoricalEras to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initHistoricalEras()
    {
        if (collHistoricalEras == null)
        {
            collHistoricalEras = new ArrayList();
        }
    }

    /**
     * Method called to associate a HistoricalEra object to this object
     * through the HistoricalEra foreign key attribute
     *
     * @param l HistoricalEra
     * @throws TorqueException
     */
    public void addHistoricalEra(HistoricalEra l) throws TorqueException
    {
        getHistoricalEras().add(l);
        l.setActivity((Activity) this);
    }

    /**
     * The criteria used to select the current contents of collHistoricalEras
     */
    private Criteria lastHistoricalErasCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getHistoricalEras(new Criteria())
     *
     * @throws TorqueException
     */
    public List getHistoricalEras() throws TorqueException
    {
        if (collHistoricalEras == null)
        {
            collHistoricalEras = getHistoricalEras(new Criteria(10));
        }
        return collHistoricalEras;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity has previously
     * been saved, it will retrieve related HistoricalEras from storage.
     * If this Activity is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getHistoricalEras(Criteria criteria) throws TorqueException
    {
        if (collHistoricalEras == null)
        {
            if (isNew())
            {
               collHistoricalEras = new ArrayList();
            }
            else
            {
                      criteria.add(HistoricalEraPeer.ACTIVITYID, getActivityID() );
                      collHistoricalEras = HistoricalEraPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(HistoricalEraPeer.ACTIVITYID, getActivityID());
                      if (!lastHistoricalErasCriteria.equals(criteria))
                {
                    collHistoricalEras = HistoricalEraPeer.doSelect(criteria);
                }
            }
        }
        lastHistoricalErasCriteria = criteria;

        return collHistoricalEras;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getHistoricalEras(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getHistoricalEras(Connection con) throws TorqueException
    {
        if (collHistoricalEras == null)
        {
            collHistoricalEras = getHistoricalEras(new Criteria(10), con);
        }
        return collHistoricalEras;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity has previously
     * been saved, it will retrieve related HistoricalEras from storage.
     * If this Activity is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getHistoricalEras(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collHistoricalEras == null)
        {
            if (isNew())
            {
               collHistoricalEras = new ArrayList();
            }
            else
            {
                       criteria.add(HistoricalEraPeer.ACTIVITYID, getActivityID());
                       collHistoricalEras = HistoricalEraPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(HistoricalEraPeer.ACTIVITYID, getActivityID());
                       if (!lastHistoricalErasCriteria.equals(criteria))
                 {
                     collHistoricalEras = HistoricalEraPeer.doSelect(criteria, con);
                 }
             }
         }
         lastHistoricalErasCriteria = criteria;

         return collHistoricalEras;
     }

                        
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity is new, it will return
     * an empty collection; or if this Activity has previously
     * been saved, it will retrieve related HistoricalEras from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Activity.
     */
    protected List getHistoricalErasJoinActivity(Criteria criteria)
        throws TorqueException
    {
        if (collHistoricalEras == null)
        {
            if (isNew())
            {
               collHistoricalEras = new ArrayList();
            }
            else
            {
                            criteria.add(HistoricalEraPeer.ACTIVITYID, getActivityID());
                            collHistoricalEras = HistoricalEraPeer.doSelectJoinActivity(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(HistoricalEraPeer.ACTIVITYID, getActivityID());
                        if (!lastHistoricalErasCriteria.equals(criteria))
            {
                collHistoricalEras = HistoricalEraPeer.doSelectJoinActivity(criteria);
            }
        }
        lastHistoricalErasCriteria = criteria;

        return collHistoricalEras;
    }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity is new, it will return
     * an empty collection; or if this Activity has previously
     * been saved, it will retrieve related HistoricalEras from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Activity.
     */
    protected List getHistoricalErasJoinHistoricalEraLabel(Criteria criteria)
        throws TorqueException
    {
        if (collHistoricalEras == null)
        {
            if (isNew())
            {
               collHistoricalEras = new ArrayList();
            }
            else
            {
                            criteria.add(HistoricalEraPeer.ACTIVITYID, getActivityID());
                            collHistoricalEras = HistoricalEraPeer.doSelectJoinHistoricalEraLabel(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(HistoricalEraPeer.ACTIVITYID, getActivityID());
                        if (!lastHistoricalErasCriteria.equals(criteria))
            {
                collHistoricalEras = HistoricalEraPeer.doSelectJoinHistoricalEraLabel(criteria);
            }
        }
        lastHistoricalErasCriteria = criteria;

        return collHistoricalEras;
    }
                            


                          
            
    /**
     * Collection to store aggregation of collGradeLevels
     */
    protected List collGradeLevels;

    /**
     * Temporary storage of collGradeLevels to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initGradeLevels()
    {
        if (collGradeLevels == null)
        {
            collGradeLevels = new ArrayList();
        }
    }

    /**
     * Method called to associate a GradeLevel object to this object
     * through the GradeLevel foreign key attribute
     *
     * @param l GradeLevel
     * @throws TorqueException
     */
    public void addGradeLevel(GradeLevel l) throws TorqueException
    {
        getGradeLevels().add(l);
        l.setActivity((Activity) this);
    }

    /**
     * The criteria used to select the current contents of collGradeLevels
     */
    private Criteria lastGradeLevelsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getGradeLevels(new Criteria())
     *
     * @throws TorqueException
     */
    public List getGradeLevels() throws TorqueException
    {
        if (collGradeLevels == null)
        {
            collGradeLevels = getGradeLevels(new Criteria(10));
        }
        return collGradeLevels;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity has previously
     * been saved, it will retrieve related GradeLevels from storage.
     * If this Activity is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getGradeLevels(Criteria criteria) throws TorqueException
    {
        if (collGradeLevels == null)
        {
            if (isNew())
            {
               collGradeLevels = new ArrayList();
            }
            else
            {
                      criteria.add(GradeLevelPeer.ACTIVITYID, getActivityID() );
                      collGradeLevels = GradeLevelPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(GradeLevelPeer.ACTIVITYID, getActivityID());
                      if (!lastGradeLevelsCriteria.equals(criteria))
                {
                    collGradeLevels = GradeLevelPeer.doSelect(criteria);
                }
            }
        }
        lastGradeLevelsCriteria = criteria;

        return collGradeLevels;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getGradeLevels(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getGradeLevels(Connection con) throws TorqueException
    {
        if (collGradeLevels == null)
        {
            collGradeLevels = getGradeLevels(new Criteria(10), con);
        }
        return collGradeLevels;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity has previously
     * been saved, it will retrieve related GradeLevels from storage.
     * If this Activity is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getGradeLevels(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collGradeLevels == null)
        {
            if (isNew())
            {
               collGradeLevels = new ArrayList();
            }
            else
            {
                       criteria.add(GradeLevelPeer.ACTIVITYID, getActivityID());
                       collGradeLevels = GradeLevelPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(GradeLevelPeer.ACTIVITYID, getActivityID());
                       if (!lastGradeLevelsCriteria.equals(criteria))
                 {
                     collGradeLevels = GradeLevelPeer.doSelect(criteria, con);
                 }
             }
         }
         lastGradeLevelsCriteria = criteria;

         return collGradeLevels;
     }

                        
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity is new, it will return
     * an empty collection; or if this Activity has previously
     * been saved, it will retrieve related GradeLevels from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Activity.
     */
    protected List getGradeLevelsJoinActivity(Criteria criteria)
        throws TorqueException
    {
        if (collGradeLevels == null)
        {
            if (isNew())
            {
               collGradeLevels = new ArrayList();
            }
            else
            {
                            criteria.add(GradeLevelPeer.ACTIVITYID, getActivityID());
                            collGradeLevels = GradeLevelPeer.doSelectJoinActivity(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(GradeLevelPeer.ACTIVITYID, getActivityID());
                        if (!lastGradeLevelsCriteria.equals(criteria))
            {
                collGradeLevels = GradeLevelPeer.doSelectJoinActivity(criteria);
            }
        }
        lastGradeLevelsCriteria = criteria;

        return collGradeLevels;
    }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity is new, it will return
     * an empty collection; or if this Activity has previously
     * been saved, it will retrieve related GradeLevels from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Activity.
     */
    protected List getGradeLevelsJoinGradeLevelLabel(Criteria criteria)
        throws TorqueException
    {
        if (collGradeLevels == null)
        {
            if (isNew())
            {
               collGradeLevels = new ArrayList();
            }
            else
            {
                            criteria.add(GradeLevelPeer.ACTIVITYID, getActivityID());
                            collGradeLevels = GradeLevelPeer.doSelectJoinGradeLevelLabel(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(GradeLevelPeer.ACTIVITYID, getActivityID());
                        if (!lastGradeLevelsCriteria.equals(criteria))
            {
                collGradeLevels = GradeLevelPeer.doSelectJoinGradeLevelLabel(criteria);
            }
        }
        lastGradeLevelsCriteria = criteria;

        return collGradeLevels;
    }
                            


                          
            
    /**
     * Collection to store aggregation of collContentAreas
     */
    protected List collContentAreas;

    /**
     * Temporary storage of collContentAreas to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initContentAreas()
    {
        if (collContentAreas == null)
        {
            collContentAreas = new ArrayList();
        }
    }

    /**
     * Method called to associate a ContentArea object to this object
     * through the ContentArea foreign key attribute
     *
     * @param l ContentArea
     * @throws TorqueException
     */
    public void addContentArea(ContentArea l) throws TorqueException
    {
        getContentAreas().add(l);
        l.setActivity((Activity) this);
    }

    /**
     * The criteria used to select the current contents of collContentAreas
     */
    private Criteria lastContentAreasCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getContentAreas(new Criteria())
     *
     * @throws TorqueException
     */
    public List getContentAreas() throws TorqueException
    {
        if (collContentAreas == null)
        {
            collContentAreas = getContentAreas(new Criteria(10));
        }
        return collContentAreas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity has previously
     * been saved, it will retrieve related ContentAreas from storage.
     * If this Activity is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getContentAreas(Criteria criteria) throws TorqueException
    {
        if (collContentAreas == null)
        {
            if (isNew())
            {
               collContentAreas = new ArrayList();
            }
            else
            {
                      criteria.add(ContentAreaPeer.ACTIVITYID, getActivityID() );
                      collContentAreas = ContentAreaPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(ContentAreaPeer.ACTIVITYID, getActivityID());
                      if (!lastContentAreasCriteria.equals(criteria))
                {
                    collContentAreas = ContentAreaPeer.doSelect(criteria);
                }
            }
        }
        lastContentAreasCriteria = criteria;

        return collContentAreas;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getContentAreas(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getContentAreas(Connection con) throws TorqueException
    {
        if (collContentAreas == null)
        {
            collContentAreas = getContentAreas(new Criteria(10), con);
        }
        return collContentAreas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity has previously
     * been saved, it will retrieve related ContentAreas from storage.
     * If this Activity is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getContentAreas(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collContentAreas == null)
        {
            if (isNew())
            {
               collContentAreas = new ArrayList();
            }
            else
            {
                       criteria.add(ContentAreaPeer.ACTIVITYID, getActivityID());
                       collContentAreas = ContentAreaPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(ContentAreaPeer.ACTIVITYID, getActivityID());
                       if (!lastContentAreasCriteria.equals(criteria))
                 {
                     collContentAreas = ContentAreaPeer.doSelect(criteria, con);
                 }
             }
         }
         lastContentAreasCriteria = criteria;

         return collContentAreas;
     }

                        
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity is new, it will return
     * an empty collection; or if this Activity has previously
     * been saved, it will retrieve related ContentAreas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Activity.
     */
    protected List getContentAreasJoinActivity(Criteria criteria)
        throws TorqueException
    {
        if (collContentAreas == null)
        {
            if (isNew())
            {
               collContentAreas = new ArrayList();
            }
            else
            {
                            criteria.add(ContentAreaPeer.ACTIVITYID, getActivityID());
                            collContentAreas = ContentAreaPeer.doSelectJoinActivity(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ContentAreaPeer.ACTIVITYID, getActivityID());
                        if (!lastContentAreasCriteria.equals(criteria))
            {
                collContentAreas = ContentAreaPeer.doSelectJoinActivity(criteria);
            }
        }
        lastContentAreasCriteria = criteria;

        return collContentAreas;
    }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity is new, it will return
     * an empty collection; or if this Activity has previously
     * been saved, it will retrieve related ContentAreas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Activity.
     */
    protected List getContentAreasJoinContentAreaLabel(Criteria criteria)
        throws TorqueException
    {
        if (collContentAreas == null)
        {
            if (isNew())
            {
               collContentAreas = new ArrayList();
            }
            else
            {
                            criteria.add(ContentAreaPeer.ACTIVITYID, getActivityID());
                            collContentAreas = ContentAreaPeer.doSelectJoinContentAreaLabel(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ContentAreaPeer.ACTIVITYID, getActivityID());
                        if (!lastContentAreasCriteria.equals(criteria))
            {
                collContentAreas = ContentAreaPeer.doSelectJoinContentAreaLabel(criteria);
            }
        }
        lastContentAreasCriteria = criteria;

        return collContentAreas;
    }
                            


                          
            
    /**
     * Collection to store aggregation of collTeachingPlanSteps
     */
    protected List collTeachingPlanSteps;

    /**
     * Temporary storage of collTeachingPlanSteps to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initTeachingPlanSteps()
    {
        if (collTeachingPlanSteps == null)
        {
            collTeachingPlanSteps = new ArrayList();
        }
    }

    /**
     * Method called to associate a TeachingPlanStep object to this object
     * through the TeachingPlanStep foreign key attribute
     *
     * @param l TeachingPlanStep
     * @throws TorqueException
     */
    public void addTeachingPlanStep(TeachingPlanStep l) throws TorqueException
    {
        getTeachingPlanSteps().add(l);
        l.setActivity((Activity) this);
    }

    /**
     * The criteria used to select the current contents of collTeachingPlanSteps
     */
    private Criteria lastTeachingPlanStepsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTeachingPlanSteps(new Criteria())
     *
     * @throws TorqueException
     */
    public List getTeachingPlanSteps() throws TorqueException
    {
        if (collTeachingPlanSteps == null)
        {
            collTeachingPlanSteps = getTeachingPlanSteps(new Criteria(10));
        }
        return collTeachingPlanSteps;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity has previously
     * been saved, it will retrieve related TeachingPlanSteps from storage.
     * If this Activity is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getTeachingPlanSteps(Criteria criteria) throws TorqueException
    {
        if (collTeachingPlanSteps == null)
        {
            if (isNew())
            {
               collTeachingPlanSteps = new ArrayList();
            }
            else
            {
                      criteria.add(TeachingPlanStepPeer.ACTIVITYID, getActivityID() );
                      collTeachingPlanSteps = TeachingPlanStepPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(TeachingPlanStepPeer.ACTIVITYID, getActivityID());
                      if (!lastTeachingPlanStepsCriteria.equals(criteria))
                {
                    collTeachingPlanSteps = TeachingPlanStepPeer.doSelect(criteria);
                }
            }
        }
        lastTeachingPlanStepsCriteria = criteria;

        return collTeachingPlanSteps;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTeachingPlanSteps(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTeachingPlanSteps(Connection con) throws TorqueException
    {
        if (collTeachingPlanSteps == null)
        {
            collTeachingPlanSteps = getTeachingPlanSteps(new Criteria(10), con);
        }
        return collTeachingPlanSteps;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity has previously
     * been saved, it will retrieve related TeachingPlanSteps from storage.
     * If this Activity is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTeachingPlanSteps(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collTeachingPlanSteps == null)
        {
            if (isNew())
            {
               collTeachingPlanSteps = new ArrayList();
            }
            else
            {
                       criteria.add(TeachingPlanStepPeer.ACTIVITYID, getActivityID());
                       collTeachingPlanSteps = TeachingPlanStepPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(TeachingPlanStepPeer.ACTIVITYID, getActivityID());
                       if (!lastTeachingPlanStepsCriteria.equals(criteria))
                 {
                     collTeachingPlanSteps = TeachingPlanStepPeer.doSelect(criteria, con);
                 }
             }
         }
         lastTeachingPlanStepsCriteria = criteria;

         return collTeachingPlanSteps;
     }

                  
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity is new, it will return
     * an empty collection; or if this Activity has previously
     * been saved, it will retrieve related TeachingPlanSteps from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Activity.
     */
    protected List getTeachingPlanStepsJoinActivity(Criteria criteria)
        throws TorqueException
    {
        if (collTeachingPlanSteps == null)
        {
            if (isNew())
            {
               collTeachingPlanSteps = new ArrayList();
            }
            else
            {
                            criteria.add(TeachingPlanStepPeer.ACTIVITYID, getActivityID());
                            collTeachingPlanSteps = TeachingPlanStepPeer.doSelectJoinActivity(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(TeachingPlanStepPeer.ACTIVITYID, getActivityID());
                        if (!lastTeachingPlanStepsCriteria.equals(criteria))
            {
                collTeachingPlanSteps = TeachingPlanStepPeer.doSelectJoinActivity(criteria);
            }
        }
        lastTeachingPlanStepsCriteria = criteria;

        return collTeachingPlanSteps;
    }
                            


                          
            
    /**
     * Collection to store aggregation of collWebLinks
     */
    protected List collWebLinks;

    /**
     * Temporary storage of collWebLinks to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initWebLinks()
    {
        if (collWebLinks == null)
        {
            collWebLinks = new ArrayList();
        }
    }

    /**
     * Method called to associate a WebLink object to this object
     * through the WebLink foreign key attribute
     *
     * @param l WebLink
     * @throws TorqueException
     */
    public void addWebLink(WebLink l) throws TorqueException
    {
        getWebLinks().add(l);
        l.setActivity((Activity) this);
    }

    /**
     * The criteria used to select the current contents of collWebLinks
     */
    private Criteria lastWebLinksCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getWebLinks(new Criteria())
     *
     * @throws TorqueException
     */
    public List getWebLinks() throws TorqueException
    {
        if (collWebLinks == null)
        {
            collWebLinks = getWebLinks(new Criteria(10));
        }
        return collWebLinks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity has previously
     * been saved, it will retrieve related WebLinks from storage.
     * If this Activity is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getWebLinks(Criteria criteria) throws TorqueException
    {
        if (collWebLinks == null)
        {
            if (isNew())
            {
               collWebLinks = new ArrayList();
            }
            else
            {
                      criteria.add(WebLinkPeer.ACTIVITYID, getActivityID() );
                      collWebLinks = WebLinkPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(WebLinkPeer.ACTIVITYID, getActivityID());
                      if (!lastWebLinksCriteria.equals(criteria))
                {
                    collWebLinks = WebLinkPeer.doSelect(criteria);
                }
            }
        }
        lastWebLinksCriteria = criteria;

        return collWebLinks;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getWebLinks(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getWebLinks(Connection con) throws TorqueException
    {
        if (collWebLinks == null)
        {
            collWebLinks = getWebLinks(new Criteria(10), con);
        }
        return collWebLinks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity has previously
     * been saved, it will retrieve related WebLinks from storage.
     * If this Activity is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getWebLinks(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collWebLinks == null)
        {
            if (isNew())
            {
               collWebLinks = new ArrayList();
            }
            else
            {
                       criteria.add(WebLinkPeer.ACTIVITYID, getActivityID());
                       collWebLinks = WebLinkPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(WebLinkPeer.ACTIVITYID, getActivityID());
                       if (!lastWebLinksCriteria.equals(criteria))
                 {
                     collWebLinks = WebLinkPeer.doSelect(criteria, con);
                 }
             }
         }
         lastWebLinksCriteria = criteria;

         return collWebLinks;
     }

                  
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Activity is new, it will return
     * an empty collection; or if this Activity has previously
     * been saved, it will retrieve related WebLinks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Activity.
     */
    protected List getWebLinksJoinActivity(Criteria criteria)
        throws TorqueException
    {
        if (collWebLinks == null)
        {
            if (isNew())
            {
               collWebLinks = new ArrayList();
            }
            else
            {
                            criteria.add(WebLinkPeer.ACTIVITYID, getActivityID());
                            collWebLinks = WebLinkPeer.doSelectJoinActivity(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(WebLinkPeer.ACTIVITYID, getActivityID());
                        if (!lastWebLinksCriteria.equals(criteria))
            {
                collWebLinks = WebLinkPeer.doSelectJoinActivity(criteria);
            }
        }
        lastWebLinksCriteria = criteria;

        return collWebLinks;
    }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("ActivityID");
              fieldNames.add("StatusID");
              fieldNames.add("VisitorID");
              fieldNames.add("Title");
              fieldNames.add("ShortDescription");
              fieldNames.add("LongDescription");
              fieldNames.add("SubmittedOn");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("ActivityID"))
        {
                return new Integer(getActivityID());
            }
          if (name.equals("StatusID"))
        {
                return new Integer(getStatusID());
            }
          if (name.equals("VisitorID"))
        {
                return new Integer(getVisitorID());
            }
          if (name.equals("Title"))
        {
                return getTitle();
            }
          if (name.equals("ShortDescription"))
        {
                return getShortDescription();
            }
          if (name.equals("LongDescription"))
        {
                return getLongDescription();
            }
          if (name.equals("SubmittedOn"))
        {
                return getSubmittedOn();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(ActivityPeer.ACTIVITYID))
        {
                return new Integer(getActivityID());
            }
          if (name.equals(ActivityPeer.STATUSID))
        {
                return new Integer(getStatusID());
            }
          if (name.equals(ActivityPeer.VISITORID))
        {
                return new Integer(getVisitorID());
            }
          if (name.equals(ActivityPeer.TITLE))
        {
                return getTitle();
            }
          if (name.equals(ActivityPeer.SHORTDESCRIPTION))
        {
                return getShortDescription();
            }
          if (name.equals(ActivityPeer.LONGDESCRIPTION))
        {
                return getLongDescription();
            }
          if (name.equals(ActivityPeer.SUBMITTEDON))
        {
                return getSubmittedOn();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getActivityID());
            }
              if (pos == 1)
        {
                return new Integer(getStatusID());
            }
              if (pos == 2)
        {
                return new Integer(getVisitorID());
            }
              if (pos == 3)
        {
                return getTitle();
            }
              if (pos == 4)
        {
                return getShortDescription();
            }
              if (pos == 5)
        {
                return getLongDescription();
            }
              if (pos == 6)
        {
                return getSubmittedOn();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(ActivityPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ActivityPeer.doInsert((Activity) this, con);
                    setNew(false);
                }
                else
                {
                    ActivityPeer.doUpdate((Activity) this, con);
                }
            }

                                      
                
            if (collActivityItems != null)
            {
                for (int i = 0; i < collActivityItems.size(); i++)
                {
                    ((ActivityItem) collActivityItems.get(i)).save(con);
                }
            }
                                          
                
            if (collHistoricalEras != null)
            {
                for (int i = 0; i < collHistoricalEras.size(); i++)
                {
                    ((HistoricalEra) collHistoricalEras.get(i)).save(con);
                }
            }
                                          
                
            if (collGradeLevels != null)
            {
                for (int i = 0; i < collGradeLevels.size(); i++)
                {
                    ((GradeLevel) collGradeLevels.get(i)).save(con);
                }
            }
                                          
                
            if (collContentAreas != null)
            {
                for (int i = 0; i < collContentAreas.size(); i++)
                {
                    ((ContentArea) collContentAreas.get(i)).save(con);
                }
            }
                                          
                
            if (collTeachingPlanSteps != null)
            {
                for (int i = 0; i < collTeachingPlanSteps.size(); i++)
                {
                    ((TeachingPlanStep) collTeachingPlanSteps.get(i)).save(con);
                }
            }
                                          
                
            if (collWebLinks != null)
            {
                for (int i = 0; i < collWebLinks.size(); i++)
                {
                    ((WebLink) collWebLinks.get(i)).save(con);
                }
            }
                          alreadyInSave = false;
        }
      }


                          
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  activityID ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setActivityID(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setActivityID(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getActivityID());
      }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Activity copy() throws TorqueException
    {
        return copyInto(new Activity());
    }
  
    protected Activity copyInto(Activity copyObj) throws TorqueException
    {
          copyObj.setActivityID(activityID);
          copyObj.setStatusID(statusID);
          copyObj.setVisitorID(visitorID);
          copyObj.setTitle(title);
          copyObj.setShortDescription(shortDescription);
          copyObj.setLongDescription(longDescription);
          copyObj.setSubmittedOn(submittedOn);
  
                    copyObj.setActivityID(0);
                                                
                                      
                
        List v = getActivityItems();
        for (int i = 0; i < v.size(); i++)
        {
            ActivityItem obj = (ActivityItem) v.get(i);
            copyObj.addActivityItem(obj.copy());
        }
                                                  
                
        v = getHistoricalEras();
        for (int i = 0; i < v.size(); i++)
        {
            HistoricalEra obj = (HistoricalEra) v.get(i);
            copyObj.addHistoricalEra(obj.copy());
        }
                                                  
                
        v = getGradeLevels();
        for (int i = 0; i < v.size(); i++)
        {
            GradeLevel obj = (GradeLevel) v.get(i);
            copyObj.addGradeLevel(obj.copy());
        }
                                                  
                
        v = getContentAreas();
        for (int i = 0; i < v.size(); i++)
        {
            ContentArea obj = (ContentArea) v.get(i);
            copyObj.addContentArea(obj.copy());
        }
                                                  
                
        v = getTeachingPlanSteps();
        for (int i = 0; i < v.size(); i++)
        {
            TeachingPlanStep obj = (TeachingPlanStep) v.get(i);
            copyObj.addTeachingPlanStep(obj.copy());
        }
                                                  
                
        v = getWebLinks();
        for (int i = 0; i < v.size(); i++)
        {
            WebLink obj = (WebLink) v.get(i);
            copyObj.addWebLink(obj.copy());
        }
                    
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ActivityPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Activity:\n");
        str.append("ActivityID = ")
           .append(getActivityID())
           .append("\n");
        str.append("StatusID = ")
           .append(getStatusID())
           .append("\n");
        str.append("VisitorID = ")
           .append(getVisitorID())
           .append("\n");
        str.append("Title = ")
           .append(getTitle())
           .append("\n");
        str.append("ShortDescription = ")
           .append(getShortDescription())
           .append("\n");
        str.append("LongDescription = ")
           .append(getLongDescription())
           .append("\n");
        str.append("SubmittedOn = ")
           .append(getSubmittedOn())
           .append("\n");
        return(str.toString());
    }
}
