package museum.history.deerfield.centuries.database.om;

import java.lang.reflect.Array;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.HashMap;
import org.apache.torque.util.Criteria;
import org.apache.torque.TorqueException;
import museum.history.deerfield.centuries.util.VectorUtil;
import museum.history.deerfield.centuries.database.om.Status;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Mar 31 09:39:36 EST 2004]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class StatusPeer extends BaseStatusPeer {
  
  // Store a cache of the statuses, so we don't have to hit the database repeatedly.
  private static HashMap allStatuses_ = null;


  /**
   * Returns the Status object with the given statusID.
   */
  public static Status getStatus( int statusID ) {
    HashMap allStatuses = getStatuses();
    Status  status      = (Status) allStatuses.get( new Integer( statusID ) );
    return (status);
  }


  /**
   * Returns a Vector of Statuses for an array of statusIDs.
   * If statusIDs array is empty, returns an empty Vector.
   */
  public static Vector getStatuses( int[] statusIDs ) {
    Vector  selectedStatuses    = new Vector();
    HashMap allStatuses         = getStatuses();
    int     numSelectedStatuses = Array.getLength( statusIDs );
    
    for (int i=0; i<numSelectedStatuses; i++) {
    	Integer statusID = new Integer( statusIDs[i] );
    	selectedStatuses.add( (Status) allStatuses.get( statusID ) );
    }
    return (selectedStatuses);
  }


  /**
   * Returns a HashMap of all Statuses, where the keys are the statusIDs, and the values
   * are the Status objects.
   */
  public static HashMap getStatuses() {

    if (allStatuses_ == null) {
      allStatuses_ = new HashMap();
      
      try {
        Criteria criteria = new Criteria();
        criteria.addAscendingOrderByColumn( STATUSID );
        List     statuses = doSelect( criteria );
        Iterator iter     = statuses.iterator();
    
        while (iter.hasNext()) {
          Status status = (Status) iter.next();
          allStatuses_.put( new Integer( status.getStatusID() ), status );
        }
          
      } catch (TorqueException e) {
        System.err.println( "StatusPeer getStatuses:  Torque exception thrown." );
      }
    }
    return (allStatuses_);
  }
}
